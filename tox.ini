# Copyright 2022 Canonical Ltd.
# See LICENSE file for licensing details.

[tox]
skipsdist = True
isolated_build = True
skip_missing_interpreters = True
envlist = lint, unit

[vars]
application = kafka
src_path = {toxinidir}/src/
tst_path = {toxinidir}/tests/
lib_path = {toxinidir}/lib/charms/kafka
all_path = {[vars]src_path} {[vars]tst_path} 

[testenv]
allowlist_externals = /bin/bash
                      poetry
whitelist_externals = poetry

setenv =
  PYTHONPATH = {toxinidir}:{toxinidir}/lib:{[vars]src_path}
  PYTHONBREAKPOINT=ipdb.set_trace
  PY_COLORS=1
passenv =
  PYTHONPATH
  CHARM_BUILD_DIR
  MODEL_SETTINGS
deps =
    poetry

[testenv:refresh]
description = Short refresh script for charm-dev
commands = 
    /bin/bash -ec "juju destroy-model {[vars]application} --force --destroy-storage --no-wait"
    /bin/bash -ec "juju add-model {[vars]application}"
    /bin/bash -ec "juju deploy zookeeper --channel edge -n 3"
    /bin/bash -ec "charmcraft pack"
    /bin/bash -ec "juju deploy ./*.charm -n 3"
    /bin/bash -ec "juju relate kafka zookeeper"

[testenv:fmt]
description = Apply coding style standards to code
commands =
    poetry install
    poetry export -f requirements.txt -o requirements.txt

    poetry install --only fmt
    poetry run ruff --fix {[vars]all_path}
    poetry run black {[vars]all_path}

[testenv:lint]
description = Check code against coding style standards
commands =
    poetry install --only lint
    poetry run codespell {toxinidir} \
        --skip {toxinidir}/.git \
        --skip {toxinidir}/.tox \
        --skip {toxinidir}/build \
        --skip {toxinidir}/lib \
        --skip {toxinidir}/venv \
        --skip {toxinidir}/.mypy_cache \
        --skip {toxinidir}/icon.svg

    poetry run ruff {[vars]all_path}
    poetry run black --check --diff {[vars]all_path}

[testenv:unit]
description = Run unit tests
commands =
    poetry install --with unit
    poetry run coverage run --source={[vars]src_path} \
        -m pytest --ignore={[vars]tst_path}integration -v --tb native -s {posargs}
    poetry run coverage report

[testenv:integration]
description = Run integration tests
commands =
    poetry install --with integration
    poetry run pytest -vv --tb native --ignore={[vars]tst_path}unit --log-cli-level=INFO -s {posargs}

[testenv:integration-charm]
description = Run base integration tests
commands =
    poetry install --with integration
    poetry run pytest tests/integration/test_charm.py -vv --tb native --ignore={[vars]tst_path}unit --log-cli-level=INFO -s {posargs}

[testenv:integration-provider]
description = Run integration tests for provider
commands =
    poetry install --with integration
    poetry run pytest tests/integration/test_provider.py -vv --tb native --ignore={[vars]tst_path}unit --log-cli-level=INFO -s {posargs}

[testenv:integration-scaling]
description = Run scaling integration tests
commands =
    poetry install --with integration
    poetry run pytest tests/integration/test_scaling.py -vv --tb native --ignore={[vars]tst_path}unit --log-cli-level=INFO -s {posargs}

[testenv:integration-password-rotation]
description = Run password rotation integration tests
commands =
    poetry install --with integration
    poetry run pytest tests/integration/test_password_rotation.py -vv --tb native --ignore={[vars]tst_path}unit --log-cli-level=INFO -s {posargs}

[testenv:integration-tls]
description = Run TLS integration tests
commands =
    poetry install --with integration
    poetry run pytest tests/integration/test_tls.py -vv --tb native --ignore={[vars]tst_path}unit --log-cli-level=INFO -s {posargs}
